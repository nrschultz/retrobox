{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"g",
				"getRosterFiles\tmethod"
			],
			[
				"roster",
				"RosterFileParser\tclass"
			],
			[
				"team",
				"TeamsFileParser\tclass"
			],
			[
				"fi",
				"readFile\tfunction"
			],
			[
				"par",
				"parseFile\tmethod"
			],
			[
				"kaf",
				"KafkaRestResponse\talias"
			],
			[
				"Tpic",
				"TopicDataInterface\talias"
			],
			[
				"TOpic",
				"TopicDataInterface\talias"
			],
			[
				"Kafka",
				"KafkaRestResponse\talias"
			],
			[
				"Kafakre",
				"KafkaRestResponse\talias"
			],
			[
				"erro",
				"error_code\tproperty"
			],
			[
				"getmocsche",
				"getMockSchemaCache\tfunction"
			],
			[
				"hand",
				"handleSuccess\tmethod"
			],
			[
				"err",
				"error_code\tproperty"
			],
			[
				"respo",
				"responseOffsetItem\tlet"
			],
			[
				"Schema",
				"SchemaCacheInterface\talias"
			],
			[
				"response",
				"response\tparameter"
			],
			[
				"kafaerr",
				"KafkaResponseBodyError\talias"
			],
			[
				"kafka",
				"KafkaResponseBodyError\tinterface"
			],
			[
				"mock",
				"mockRetry\tlet"
			],
			[
				"han",
				"handleSuccess\tmethod"
			],
			[
				"TOpi",
				"TopicDataInterface\talias"
			],
			[
				"issucc",
				"isSuccessfulResponseBody\tfunction"
			],
			[
				"kafak",
				"KafkaResponseBodySuccess\tinterface"
			],
			[
				"Kafa",
				"KafkaRestProxy\tclass"
			],
			[
				"me",
				"multipartInputSchemaName\tproperty"
			],
			[
				"mul",
				"multipartInputSchemaName\tproperty"
			],
			[
				"inpu",
				"inputContentTypeHeader\tlet"
			],
			[
				"Content",
				"ContentTypeMiddlewareProviderInterface\tinterface"
			],
			[
				"Topic",
				"TopicDataInterface\talias"
			],
			[
				"Top",
				"TopicDataInterface\talias"
			],
			[
				"bat",
				"batch\tlet"
			],
			[
				"repo",
				"responseBody\tlet"
			],
			[
				"is",
				"isSuccessfulResponseBody\tfunction"
			],
			[
				"kafa",
				"KafkaResponseBodyError\tinterface"
			],
			[
				"kafoffse",
				"KafkaResponseOffsetError\tinterface"
			],
			[
				"reson",
				"responseBody\tlet"
			],
			[
				"co",
				"statusCode\tproperty"
			],
			[
				"ka",
				"getKafkaRestProxy\tfunction"
			],
			[
				"encode",
				"encodedItemString\tlet"
			],
			[
				"to",
				"toJSON\tmethod"
			],
			[
				"t",
				"Type\tclass"
			],
			[
				"as",
				"avsc\texternal module name"
			],
			[
				"topic",
				"topicName\tparameter"
			],
			[
				"batch",
				"batchId\tlet"
			],
			[
				"deeep",
				"deepEquals\tmethod"
			],
			[
				"bas",
				"batchesInFlight\tproperty"
			],
			[
				"numb",
				"numberOfBatches\tlet"
			],
			[
				"handleer",
				"handleRequestError\tmethod"
			],
			[
				"get",
				"getCalls\tmethod"
			],
			[
				"deepe",
				"deepEquals\tmethod"
			],
			[
				"return",
				"returns\tmethod"
			],
			[
				"sinon",
				"Sinon\talias"
			],
			[
				"topi",
				"topicName\tlet"
			],
			[
				"u",
				"util\tdirectory"
			],
			[
				"sin",
				"Sinon\talias"
			],
			[
				"flu",
				"flushTimers\tproperty"
			],
			[
				"Ka",
				"KafkaRestClient\tclass"
			],
			[
				"topicdata",
				"TopicDataInterface\tinterface"
			],
			[
				"Topi",
				"TopicQueue\tclass"
			],
			[
				"Bat",
				"BatchEncoderInterface\tinterface"
			],
			[
				"fl",
				"flushesInFlight\tproperty"
			],
			[
				"Kafak",
				"KafkaTopicName\tenum"
			],
			[
				"upda",
				"updateUserNotificationSetting\tmethod"
			],
			[
				"DBUSe",
				"DBUserNotificationSetting\talias"
			],
			[
				"ge",
				"generateTokenForUserId\tmethod"
			],
			[
				"gener",
				"generateTokenForUserId\tmethod"
			],
			[
				"busi",
				"BusinessInterface\tinterface"
			],
			[
				"DBUser",
				"DBUserNotificationSetting\talias"
			],
			[
				"updat",
				"updateSingleItem\tmethod"
			],
			[
				"req",
				"request\tproperty"
			],
			[
				"ap",
				"apiReturnPerson\tmethod"
			],
			[
				"user",
				"user_id\tproperty"
			],
			[
				"fin",
				"findOne\tmethod"
			],
			[
				"DBU",
				"DBUserNotificationSetting\talias"
			],
			[
				"userni",
				"UserNotificationSettingInterface\talias"
			],
			[
				"Userno",
				"UserNotificationSettingDataAccessorInterface\ttype"
			],
			[
				"Userdat",
				"UserNotificationSettingDataAccessorInterface\ttype"
			],
			[
				"usernot",
				"UserNotificationSettingInterface\tinterface"
			],
			[
				"reques",
				"BAD_REQUEST\tenum member"
			],
			[
				"Mod",
				"ModelsTeamChannelActions\tclass"
			],
			[
				"Mode",
				"ModelsTeamChannelActionsInterface\tinterface"
			],
			[
				"rep",
				"response\tproperty"
			],
			[
				"valid",
				"validMediaSecretData\tlet"
			],
			[
				"mediase",
				"mediaSecretData\tlet"
			],
			[
				"a",
				"DatabaseAggregatorBusinessInterface\tinterface"
			],
			[
				"Handl",
				"HandledEventTypes\tenum"
			],
			[
				"HAN",
				"HandledEventTypes\tenum"
			],
			[
				"add",
				"addChannelMediaSecret\talias"
			],
			[
				"dee",
				"deepEquals\tmethod"
			],
			[
				"chann",
				"channelId\tlet"
			],
			[
				"create",
				"create\tmethod"
			],
			[
				"messa",
				"messagingChannelMediaSecret\tproperty"
			],
			[
				"mess",
				"messagingChannelMediaSecret\tproperty"
			],
			[
				"DBmes",
				"DBMessagingChannelMediaSecret\talias"
			],
			[
				"DBMes",
				"DBMessagingChannelMediaSecret\talias"
			],
			[
				"models",
				"ModelsMessagingChannelMediaSecretActionsInterface\talias"
			],
			[
				"mode",
				"ModelsMessagingChannelMediaSecretActionsInterface\tinterface"
			],
			[
				"DBme",
				"DBMessagingChannelMediaSecret\talias"
			],
			[
				"middle",
				"AuthorizationMiddlwareProviderInterface\tinterface"
			],
			[
				"getmess",
				"GET_MESSAGING_CHANNEL_IMAGE\tenum member"
			],
			[
				"ne",
				"nextPageUrl"
			],
			[
				"fe",
				"fetchAll"
			],
			[
				"stro",
				"stroke"
			],
			[
				"strok",
				"strokeStyle"
			],
			[
				"Messagingcha",
				"ModelsMessagingChannelImageActionsInterface\talias"
			],
			[
				"File",
				"FileUploadContext\tinterface"
			],
			[
				"he",
				"headers\tproperty"
			],
			[
				"valida",
				"validateHeaders\tfunction"
			],
			[
				"rea",
				"ReadableStream\tinterface"
			],
			[
				"REada",
				"ReadableStream\tinterface"
			],
			[
				"Busin",
				"BusinessInterface\tinterface"
			],
			[
				"vali",
				"fileUploadHeaderValidationMiddlewareProvider\tproperty"
			],
			[
				"Fileup",
				"FileUploadHeaderValidationMiddlewareProviderInterface\talias"
			],
			[
				"fileup",
				"FileUploadHeaderValidationMiddlewareProviderInterface\tinterface"
			],
			[
				"file",
				"FileUploadHeaderValidationMiddlewareProvider\tclass"
			],
			[
				"confi",
				"confirmationData\tlet"
			],
			[
				"bus",
				"busboyFinishPromise\tlet"
			],
			[
				"mediate",
				"MediaType\talias"
			],
			[
				"medi",
				"media_type\tproperty"
			],
			[
				"th",
				"thumbnail\tvar"
			],
			[
				"Mediatype",
				"MediaTypePayload\talias"
			],
			[
				"up",
				"uploadMultiPartMedia\tmethod"
			],
			[
				"string",
				"stringToUpload\tlet"
			],
			[
				"v",
				"v4\tproperty"
			],
			[
				"cloud",
				"cloudfrontResponse\tparameter"
			],
			[
				"clous",
				"CLOUDFRONT_SIGNER_KEY_PAIR_ID\talias"
			],
			[
				"s",
				"s3_client\tscript"
			]
		]
	},
	"buffers":
	[
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 839,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tsconfig.json",
			"settings":
			{
				"buffer_size": 513,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lib/index.ts",
			"settings":
			{
				"buffer_size": 878,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lib/file_picker.ts",
			"settings":
			{
				"buffer_size": 1265,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "node_modules/@types/glob/index.d.ts",
			"settings":
			{
				"buffer_size": 3367,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lib/teams_file_parser.ts",
			"settings":
			{
				"buffer_size": 799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/test/teams_file_parser_test/parser_test.ts",
			"settings":
			{
				"buffer_size": 2766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lib/roster_file_parser.ts",
			"settings":
			{
				"buffer_size": 1552,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lib/event_file_parser.ts",
			"settings":
			{
				"buffer_size": 2312,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/test/roster_file_parser_test/parser_test.ts",
			"settings":
			{
				"buffer_size": 5199,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{BAL: {team_id: 'BAL', league: 'A', location: 'Baltimore', team_name: 'Orioles'},\nBOS: {team_id: 'BOS', league: 'A', location: 'Boston', team_name: 'Red Sox'},\nCLE: {team_id: 'CLE', league: 'A', location: 'Cleveland', team_name: 'Indians'},\nDET: {team_id: 'DET', league: 'A', location: 'Detroit', team_name: 'Tigers'},\nMIL: {team_id: 'MIL', league: 'A', location: 'Milwaukee', team_name: 'Brewers'},\nNYA: {team_id: 'NYA', league: 'A', location: 'New York', team_name: 'Yankees'},\nTOR: {team_id: 'TOR', league: 'A', location: 'Toronto', team_name: 'Blue Jays'},\nCAL: {team_id: 'CAL', league: 'A', location: 'California', team_name: 'Angels'},\nCHA: {team_id: 'CHA', league: 'A', location: 'Chicago', team_name: 'White Sox'},\nKCA: {team_id: 'KCA', league: 'A', location: 'Kansas City', team_name: 'Royals'},\nMIN: {team_id: 'MIN', league: 'A', location: 'Minnesota', team_name: 'Twins'},\nOAK: {team_id: 'OAK', league: 'A', location: 'Oakland', team_name: 'Athletics'},\nSEA: {team_id: 'SEA', league: 'A', location: 'Seattle', team_name: 'Mariners'},\nTEX: {team_id: 'TEX', league: 'A', location: 'Texas', team_name: 'Rangers'},\nCHN: {team_id: 'CHN', league: 'N', location: 'Chicago', team_name: 'Cubs'},\nMON: {team_id: 'MON', league: 'N', location: 'Montreal', team_name: 'Expos'},\nNYN: {team_id: 'NYN', league: 'N', location: 'New York', team_name: 'Mets'},\nPHI: {team_id: 'PHI', league: 'N', location: 'Philadelphia', team_name: 'Phillies'},\nPIT: {team_id: 'PIT', league: 'N', location: 'Pittsburgh', team_name: 'Pirates'},\nSLN: {team_id: 'SLN', league: 'N', location: 'St.Louis', team_name: 'Cardinals'},\nATL: {team_id: 'ATL', league: 'N', location: 'Atlanta', team_name: 'Braves'},\nCIN: {team_id: 'CIN', league: 'N', location: 'Cincinnati', team_name: 'Reds'},\nHOU: {team_id: 'HOU', league: 'N', location: 'Houston', team_name: 'Astros'},\nLAN: {team_id: 'LAN', league: 'N', location: 'Los Angeles', team_name: 'Dodgers'},\nSDN: {team_id: 'SDN', league: 'N', location: 'San Diego', team_name: 'Padres'},\nSFN: {team_id: 'SFN', league: 'N', location: 'San Francisco', team_name: 'Giants'},\n}\n",
			"settings":
			{
				"buffer_size": 2086,
				"line_ending": "Unix",
				"name": "{BAL: {team_id: 'BAL', league: 'A', location: 'Bal"
			}
		},
		{
			"contents": "'Baltimore', team_name: 'Orioles'\n'Boston', team_name: 'Red Sox'\n'Cleveland', team_name: 'Indians'\n'Detroit', team_name: 'Tigers'\n'Milwaukee', team_name: 'Brewers'\n'New York', team_name: 'Yankees'\n'Toronto', team_name: 'Blue Jays'\n'California', team_name: 'Angels'\n'Chicago', team_name: 'White Sox'\n'Kansas City', team_name: 'Royals'\n'Minnesota', team_name: 'Twins'\n'Oakland', team_name: 'Athletics'\n'Seattle', team_name: 'Mariners'\n'Texas', team_name: 'Rangers'\n'Chicago', team_name: 'Cubs'\n'Montreal', team_name: 'Expos'\n'New York', team_name: 'Mets'\n'Philadelphia', team_name: 'Phillies'\n'Pittsburgh', team_name: 'Pirates'\n'St.Louis', team_name: 'Cardinals'\n'Atlanta', team_name: 'Braves'\n'Cincinnati', team_name: 'Reds'\n'Houston', team_name: 'Astros'\n'Los Angeles', team_name: 'Dodgers'\n'San Diego', team_name: 'Padres'\n'San Francisco', team_name: 'Giants'",
			"settings":
			{
				"buffer_size": 860,
				"line_ending": "Unix",
				"name": "'Baltimore', team_name: 'Orioles'"
			}
		},
		{
			"file": "src/test/teams_file_parser_test/TEAM1991",
			"settings":
			{
				"buffer_size": 601,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/TypeScript/TypeScript.sublime-build",
					""
				]
			],
			[
				"Packages/TypeScript/TypeScript.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 373.0,
		"last_filter": "rename",
		"selected_items":
		[
			[
				"rename",
				"File: Rename"
			],
			[
				"move",
				"File: Move"
			],
			[
				"pus",
				"Git: Push Current Branch"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"add",
				"Git: Quick Add"
			],
			[
				"push",
				"Git: Push Current Branch"
			],
			[
				"ad",
				"Git: Quick Add"
			],
			[
				"path",
				"File: Copy Path From Project"
			],
			[
				"pat",
				"File: Copy Path From Project"
			],
			[
				"blame",
				"Git: Blame"
			],
			[
				"sublimelintersetting",
				"Preferences: SublimeLinter Settings"
			],
			[
				"sublimelinter sett",
				"Preferences: SublimeLinter Settings"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"packaglist",
				"Package Control: List Packages"
			],
			[
				"diff",
				"Git: Diff"
			],
			[
				"renma",
				"TypeScript: Rename"
			],
			[
				"add fo",
				"Project: Add Folder"
			],
			[
				"padd",
				"Project: Add Folder"
			],
			[
				"sta",
				"Git: Status"
			],
			[
				"statu",
				"Git: Status"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"javasc",
				"Set Syntax: JavaScript"
			],
			[
				"copy",
				"File: Copy Path"
			],
			[
				"dif",
				"Git: Diff"
			],
			[
				"pushh",
				"Git: Push Current Branch"
			],
			[
				"ren",
				"File: Rename"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"togllinter",
				"SublimeLinter: Toggle Linter"
			],
			[
				"lint",
				"SublimeLinter: Toggle Linter"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"dele",
				"File: Delete"
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"del",
				"File: Delete"
			],
			[
				"pathj",
				"File: Copy Path From Project"
			],
			[
				"pyh",
				"Set Syntax: Python"
			],
			[
				"yaml",
				"Set Syntax: YAML"
			],
			[
				"type",
				"Set Syntax: TypeScript"
			],
			[
				"puis",
				"Legit: Publish"
			],
			[
				"balme",
				"Git: Blame"
			],
			[
				"jinja",
				"Set Syntax: HTML (Jinja2)"
			],
			[
				"renam",
				"TypeScript: Rename"
			],
			[
				"rn",
				"File: Rename"
			],
			[
				"types",
				"Set Syntax: TypeScript"
			],
			[
				"dlee",
				"File: Delete"
			],
			[
				"file",
				"File: Copy Name"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"pu",
				"Git: Push Current Branch"
			],
			[
				"idff",
				"Git: Diff Current File"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"jinj",
				"Set Syntax: HTML (Jinja2)"
			],
			[
				"preview",
				"Markdown Preview: Preview in Browser"
			],
			[
				"markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"filenam",
				"File: Copy Name"
			],
			[
				"jin",
				"Set Syntax: HTML (Jinja2)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"yam",
				"Set Syntax: YAML"
			],
			[
				"project",
				"Project: Edit Project"
			],
			[
				"todo",
				"Set Syntax: Todo"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"sql",
				"Set Syntax: SQL (PostgreSQL)"
			],
			[
				"add fi",
				"Git: Add Current File"
			],
			[
				"Com",
				"Git: Commit"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"typescirpt",
				"TypeScript: Show Error List"
			],
			[
				"sublimelinter",
				"SublimeLinter: Lint This View"
			],
			[
				"quiu",
				"TypeScript: Quick Info Documentation"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"om",
				"SublimeLinter: No Column Only Marks Gutter"
			],
			[
				"color",
				"Colorsublime: Install Theme"
			],
			[
				"slq",
				"SQL Beautifier: Format Current SQL File"
			],
			[
				"typescri",
				"TypeScript: GoTo Definition"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"typescript",
				"TypeScript: Signature Info"
			],
			[
				"showerror",
				"TypeScript: Show Error List"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"format",
				"uroboroSQL Formatter: Format SQL"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"lint style",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"linter",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"lis",
				"Package Control: List Packages"
			],
			[
				"reanm",
				"File: Rename"
			],
			[
				"mo",
				"File: Move"
			],
			[
				"sublimelinter ",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"forma",
				"TypeScript: Format Document"
			],
			[
				"tslint",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"pyht",
				"Set Syntax: Python"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"bame",
				"Git: Blame"
			],
			[
				"bal",
				"Git: Blame"
			],
			[
				"bla",
				"Git: Blame"
			],
			[
				"ind",
				"Indentation: Reindent Lines"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"blam",
				"Git: Blame"
			],
			[
				"pytho",
				"Set Syntax: Python"
			],
			[
				"pyhton",
				"Set Syntax: Python"
			],
			[
				"blmae",
				"Git: Blame"
			],
			[
				"BLAM",
				"Git: Blame"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"pyhto",
				"Set Syntax: Python"
			],
			[
				"bl",
				"Git: Blame"
			],
			[
				"i",
				"Indentation: Reindent Lines"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"INDE",
				"Indentation: Reindent Lines"
			],
			[
				"JSON",
				"Set Syntax: JSON"
			],
			[
				"typescr",
				"Set Syntax: TypeScript"
			],
			[
				"sublimelinter su",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"name",
				"File: Copy Name"
			],
			[
				"dot",
				"Set Syntax: Graphviz (DOT)"
			],
			[
				"sublimelinter user",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"requi",
				"Set Syntax: requirements.txt"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"linter user",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"noco",
				"SublimeLinter: No Column Highlights Entire Line"
			],
			[
				"nocu",
				"SublimeLinter: No Column Only Marks Gutter"
			],
			[
				"nocol",
				"SublimeLinter: No Column Highlights Entire Line"
			],
			[
				"war",
				"SublimeLinter: Don't Make Warnings Passive"
			],
			[
				"warnings",
				"SublimeLinter: Make Warnings Passive"
			],
			[
				"sublimlinter",
				"SublimeLinter: Show All Errors"
			],
			[
				"mini",
				"View: Toggle Minimap"
			],
			[
				"sublimelinteruser",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"control list",
				"Package Control: List Packages"
			],
			[
				"branch",
				"Git: Checkout New Branch"
			],
			[
				"lowe",
				"Convert Case: Lower Case"
			]
		],
		"width": 480.0
	},
	"console":
	{
		"height": 578.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/nick/scratch/retrobox",
		"/Users/nick/scratch/retrobox/data",
		"/Users/nick/scratch/retrobox/out",
		"/Users/nick/scratch/retrobox/src",
		"/Users/nick/scratch/retrobox/src/lib"
	],
	"file_history":
	[
		"/Users/nick/scratch/retrobox/node_modules/@types/lodash/collection/find.d.ts",
		"/Users/nick/scratch/retrobox/src/lib/base_file_parser.ts",
		"/Users/nick/gc/eden/node_modules/typescript/lib/lib.es5.d.ts",
		"/Users/nick/scratch/retrobox/src/test/roster_file_parser_test/MIN1991.ROS",
		"/Users/nick/scratch/retrobox/src/test/roster_file_parser_test/ATL1991.ROS",
		"/Users/nick/scratch/retrobox/node_modules/@types/mz/fs.d.ts",
		"/Users/nick/scratch/retrobox/src/test/index.ts",
		"/Users/nick/Downloads/1991post/1991WS.EVE",
		"/Users/nick/scratch/retrobox/src/lib/teams_parser.ts",
		"/Users/nick/scratch/retrobox/tsconfig.json",
		"/Users/nick/gc/eden/src/services/data_pipeline/kafka_rest/client.ts",
		"/Users/nick/gc/eden/src/services/data_pipeline/kafka_rest/schema_cache.ts",
		"/Users/nick/gc/kafka-rest/kafka_rest/rest_proxy.py",
		"/Users/nick/gc/eden/test/unit/services/data_pipeline/kafka_rest/batch_encoder_test.ts",
		"/Users/nick/gc/eden/test/unit/services/data_pipeline/kafka_rest/client_test.ts",
		"/Users/nick/gc/eden/src/services/data_pipeline/kafka_rest/batch_encoder.ts",
		"/Users/nick/gc/eden/src/services/data_pipeline/kafka_rest/rest_proxy.ts",
		"/Users/nick/gc/eden/src/global/data_definition/services/data_pipeline.ts",
		"/Users/nick/gc/kafka-rest/kafka_rest/producer.py",
		"/Users/nick/Library/Spelling/LocalDictionary",
		"/Users/nick/gc/eden/src/services/data_pipeline/kafka_rest/topic_queue.ts",
		"/Users/nick/gc/eden/test/util/service_mocks/data_pipeline_service/kafka_rest.ts",
		"/Users/nick/gc/kafka-rest/kafka_rest/client.py",
		"/gc/eden/out/src/services/data_pipeline/kafka_rest/client.js",
		"/Users/nick/gc/dusty-specs/apps/eden.yml",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/validation/index.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/versioning/index.ts",
		"/gc/eden/test/unit/routers/eden_router/middleware/versioning/versioning_test.ts",
		"/Users/nick/gc/eden/test/integration/routers/eden_router/persons_test.ts",
		"/Users/nick/gc/eden/testing.yml",
		"/Users/nick/gc/eden/src/business/messaging.ts",
		"/Users/nick/gc/eden/src/business/common/common.ts",
		"/Users/nick/gc/eden/Makefile",
		"/Users/nick/gc/eden/test/integration/routers/eden_router/channels_test.ts",
		"/Users/nick/gc/eden/test/integration/routers/eden_router/util.ts",
		"/Users/nick/gc/eden/test/unit/routers/eden_router/middleware/versioning/versioning_test.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/versioning/base.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/versioning/json_body.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/versioning/multipart_body.ts",
		"/Users/nick/gc/eden/src/services/user_notification/transactional_email/transactional_email.ts",
		"/Users/nick/gc/eden/src/services/user_notification/index.ts",
		"/Users/nick/gc/eden/test/unit/services/user_notification/user_notification_service_test.ts",
		"/Users/nick/gc/eden/node_modules/@types/request/index.d.ts",
		"/Users/nick/gc/eden/src/global/logging/index.ts",
		"/Users/nick/gc/eden/package.json",
		"/Users/nick/gc/eden/test/integration/routers/twilio_webhooks_router/twilio_webhook_test.ts",
		"/Users/nick/gc/eden/src/services/messaging/implementation.ts",
		"/Users/nick/gc/boxes/roles/apps/files/box_configs/eden/eden_shared_envs/eden_shared_envs_production.yml.j2",
		"/Users/nick/gc/launch-config/eden-production.sh",
		"/Users/nick/gc/eden/src/services/database/orm/model_associations/permission.ts",
		"/Users/nick/gc/launch-config/eden-staging.sh",
		"/Users/nick/gc/eden/src/services/permissions/queueable_permissions.ts",
		"/Users/nick/gc/eden/src/services/permissions/permissions.ts",
		"/Users/nick/gc/eden/src/services/database/data_accessor/other_service_data_accessor.ts",
		"/Users/nick/gc/eden/src/routers/twilio_webhooks_router/index.ts",
		"/Users/nick/gc/eden/src/services/permissions/index.ts",
		"/Users/nick/gc/eden/src/routers/middleware/request_logging.ts",
		"/Users/nick/Library/Application Support/Sublime Text 3/Packages/GoSublime/CHANGELOG.md",
		"/Users/nick/gc/eden/src/services/messaging/interfaces.ts",
		"/Users/nick/gc/eden/src/queuing/queue_libraries/queue/base_queue.ts",
		"/Users/nick/gc/eden/node_modules/avsc/types/index.d.ts",
		"/Users/nick/gc/eden/src/scripts/queuing/queue_processor.ts",
		"/Users/nick/gc/eden/src/queuing/queues/index.ts",
		"/Users/nick/gc/eden/src/queuing/queue_libraries/queue/sqs_queue.ts",
		"/Users/nick/gc/eden/src/queuing/queue_libraries/queue_backend/sqs_queue_backend/index.ts",
		"/Users/nick/gc/eden/src/business/authentication.ts",
		"/Users/nick/gc/eden/src/services/user_notification/transactional_email/templates/shared/base.html",
		"/Users/nick/gc/eden/dev/email_development_app/index.ts",
		"/Users/nick/gc/eden/src/services/user_notification/transactional_email/template_renderer.ts",
		"/Users/nick/gc/dusty-specs/apps/eden-email-development.yml",
		"/Users/nick/gc/eden/src/services/database/orm/model_associations/associations_reconcile.ts",
		"/gc/eden/test/unit/services/data_pipeline/kafka_rest/client_test.ts",
		"/Users/nick/gc/eden/src/services/user_notification/common.ts",
		"/Users/nick/gc/eden/src/services/user_notification/transactional_email/custom_filters.ts",
		"/Users/nick/gc/eden/test/unit/services/user_notification/transactional_email/template_renderer_test.ts",
		"/Users/nick/gc/eden/src/services/user_notification/transactional_email/templates/updated_schedule_event/updated_schedule_event.html",
		"/Users/nick/gc/eden/src/business/common/queueable_common.ts",
		"/Users/nick/gc/eden/src/services/database/orm/models/person_team_association.ts",
		"/Users/nick/gc/eden/test/unit/services/data_pipeline/kafka_rest/topic_queue_test.ts",
		"/Users/nick/gc/eden/src/global/exceptions/index.ts",
		"/Users/nick/gc/eden/src/services/data_pipeline/kafka_rest/exceptions.ts",
		"/Users/nick/gc/eden/test/util/data_generator/schedule.ts",
		"/gc/eden/src/services/data_pipeline/kafka_rest/client.ts",
		"/Users/nick/gc/eden/node_modules/@types/lodash/index.d.ts",
		"/Users/nick/gc/eden/node_modules/typescript/lib/lib.dom.d.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/validation/input_schemas/custom_validator_schemas/rrule_options_0_0_0.json",
		"/Users/nick/gc/eden/test/util/integration_class_setup.ts",
		"/Users/nick/gc/eden/src/services/authentication/eden/index.ts",
		"/Users/nick/gc/eden/src/business/common.ts",
		"/Users/nick/gc/eden/src/services/data_pipeline/index.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/resources/persons/index.ts",
		"/Users/nick/gc/eden/node_modules/pug/test/regression-2436/index.test.js",
		"/Users/nick/gc/eden/src/routers/eden_router/index.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/content_type.ts",
		"/Users/nick/gc/eden/test/util/service_mocks/data_pipeline_service/index.ts",
		"/Users/nick/gc/eden/test/util/service_mocks/index.ts",
		"/Users/nick/gc/eden/src/global/data_definition/services/index.ts",
		"/Users/nick/gc/eden/src/services/data_pipeline/kafka_rest/index.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/template_renderer/templates/person_detail_page/index.html",
		"/Users/nick/gc/eden/src/routers/staff_router/resources/user_router.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/middleware/authentication.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/middleware/authorization.ts",
		"/Users/nick/gc/eden/src/services/database/aggregator/schedule/index.ts",
		"/Users/nick/gc/eden/src/services/database/aggregator/event_rsvp_response.ts",
		"/Users/nick/gc/eden/src/services/database/orm/models/event_rsvp_response.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/resources/person_router.ts",
		"/Users/nick/gc/eden/node_modules/@types/node/index.d.ts",
		"/Users/nick/gc/eden/src/business/persons.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/template_renderer/templates/person_detail_page/card_notification_settings.html",
		"/Users/nick/gc/eden/src/business/index.ts",
		"/Users/nick/gc/eden/src/business/users.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/route_names.ts",
		"/Users/nick/gc/eden/src/staff_business/users.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/validation/schema_loader.ts",
		"/Users/nick/gc/eden/src/routers/eden_router/middleware/validation/input_schemas/endpoints/users/_documents/post_user_document_0_0_0.json",
		"/Users/nick/gc/eden/src/global/data_definition/database/user.ts",
		"/Users/nick/gc/eden/src/staff_business/staff_users.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/template_renderer/index.ts",
		"/Users/nick/gc/eden/src/routers/staff_router/template_renderer/templates/person_detail_page/card_profile_details.html",
		"/Users/nick/gc/eden/src/routers/staff_router/resources/password_reset_router.ts",
		"/Users/nick/gc/eden/test/unit/services/user_notification/transactional_email/transactional_email_test.ts",
		"/Users/nick/gc/eden/test/unit/services/authentication/tokens_test.ts",
		"/Users/nick/gc/eden/test/unit/business/authentication_test.ts",
		"/Users/nick/gc/eden/test/integration/routers/email_action_router/email_action_router_test.ts",
		"/Users/nick/gc/eden/test/external_services_integration/transactional_email_test.ts",
		"/Users/nick/gc/eden/src/services/user_notification/transactional_email/index.ts",
		"/Users/nick/gc/eden/src/services/authentication/index.ts",
		"/Users/nick/gc/eden/src/services/authentication/email_action/index.ts"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"fileBuffer",
			"parseFile",
			"team_name",
			"team_id",
			",",
			"rfp",
			"TestableRosterFileParser",
			"SingleGameData",
			"singleGameData",
			"parsesingleGameData",
			"gameDataList",
			"GameDataList",
			"string",
			"teamsData",
			"}"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 839,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										190,
										191
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										161,
										162
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										837,
										838
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "tsconfig.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 513,
						"regions":
						{
						},
						"selection":
						[
							[
								513,
								513
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										4591,
										4592
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										23,
										24
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/lib/index.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 878,
						"regions":
						{
						},
						"selection":
						[
							[
								650,
								650
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										875,
										876
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										426,
										427
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/lib/file_picker.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1265,
						"regions":
						{
						},
						"selection":
						[
							[
								1202,
								1202
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										968,
										969
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										943,
										944
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1245,
										1246
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1192,
										1193
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "node_modules/@types/glob/index.d.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3367,
						"regions":
						{
						},
						"selection":
						[
							[
								406,
								406
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/lib/teams_file_parser.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 799,
						"regions":
						{
						},
						"selection":
						[
							[
								294,
								294
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/test/teams_file_parser_test/parser_test.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2766,
						"regions":
						{
						},
						"selection":
						[
							[
								376,
								376
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										377,
										378
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										353,
										354
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/lib/roster_file_parser.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1552,
						"regions":
						{
						},
						"selection":
						[
							[
								1152,
								1152
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1419,
										1420
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										329,
										330
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1515,
										1516
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1151,
										1152
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/lib/event_file_parser.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2312,
						"regions":
						{
						},
						"selection":
						[
							[
								699,
								748
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1905,
										1906
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1466,
										1467
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1236,
										1237
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										697,
										698
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/test/roster_file_parser_test/parser_test.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5199,
						"regions":
						{
						},
						"selection":
						[
							[
								506,
								506
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										620,
										621
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										467,
										468
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										620,
										621
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										467,
										468
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2086,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								2086
							]
						],
						"settings":
						{
							"auto_name": "{BAL: {team_id: 'BAL', league: 'A', location: 'Bal",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"default_dir": "/Users/nick/scratch/retrobox",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 860,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								860
							]
						],
						"settings":
						{
							"auto_name": "'Baltimore', team_name: 'Orioles'",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"default_dir": "/Users/nick/scratch/retrobox",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/test/teams_file_parser_test/TEAM1991",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 601,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								601
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.GoSublime-main-output":
	{
		"height": 116.0
	},
	"output.doc":
	{
		"height": 0.0
	},
	"output.errorlist":
	{
		"height": 898.0
	},
	"output.exec":
	{
		"height": 598.0
	},
	"output.find_results":
	{
		"height": 116.0
	},
	"output.git-commit":
	{
		"height": 116.0
	},
	"output.git-pull":
	{
		"height": 116.0
	},
	"output.git-push":
	{
		"height": 116.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 116.0
	},
	"pinned_build_system": "",
	"project": "retrobox.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"eventfil",
				"src/lib/event_file_parser.ts"
			],
			[
				"ion/services/data_pipeline.ts",
				"eden/src/global/data_definition/services/data_pipeline.ts"
			],
			[
				"restpro",
				"kafka-rest/kafka_rest/rest_proxy.py"
			],
			[
				"producer",
				"kafka-rest/kafka_rest/producer.py"
			],
			[
				"client",
				"kafka-rest/kafka_rest/client.py"
			],
			[
				"make",
				"eden/Makefile"
			],
			[
				"eden",
				"dusty-specs/apps/eden.yml"
			],
			[
				"testing.ym",
				"eden/testing.yml"
			],
			[
				"routers/eden_router/middleware/versioning/versioning_test.ts",
				"eden/test/unit/routers/eden_router/middleware/versioning/versioning_test.ts"
			],
			[
				"integrationperson",
				"eden/test/integration/routers/eden_router/persons_test.ts"
			],
			[
				"dustyspecseden.",
				"dusty-specs/apps/eden.yml"
			],
			[
				"versioning.",
				"eden/src/routers/eden_router/middleware/versioning/index.ts"
			],
			[
				"usernotificationinde",
				"eden/src/services/user_notification/index.ts"
			],
			[
				"usernot",
				"eden/test/unit/services/user_notification/user_notification_service_test.ts"
			],
			[
				"restpro.ts",
				"eden/src/services/data_pipeline/kafka_rest/rest_proxy.ts"
			],
			[
				"packa",
				"eden/package.json"
			],
			[
				"edenstagin",
				"launch-config/eden-staging.sh"
			],
			[
				"modelassociationspermis",
				"eden/src/services/database/orm/model_associations/permission.ts"
			],
			[
				"launchconfigedenpr",
				"launch-config/eden-production.sh"
			],
			[
				"boxeseden",
				"boxes/roles/apps/files/box_configs/eden/eden_shared_envs/eden_shared_envs_production.yml.j2"
			],
			[
				"batchenco",
				"eden/src/services/data_pipeline/kafka_rest/batch_encoder.ts"
			],
			[
				"us",
				"eden/test/unit/services/user_notification/user_notification_service_test.ts"
			],
			[
				"requestlog",
				"eden/src/routers/middleware/request_logging.ts"
			],
			[
				"messagingimplemen",
				"eden/src/services/messaging/implementation.ts"
			],
			[
				"schemacache",
				"eden/src/services/data_pipeline/kafka_rest/schema_cache.ts"
			],
			[
				"sqq",
				"eden/src/queuing/queue_libraries/queue/sqs_queue.ts"
			],
			[
				"queuesindexts",
				"eden/src/queuing/queues/index.ts"
			],
			[
				"queueprocessor",
				"eden/src/scripts/queuing/queue_processor.ts"
			],
			[
				"kafkarestprpy",
				"kafka-rest/kafka_rest/rest_proxy.py"
			],
			[
				"kafkaproducer",
				"kafka-rest/kafka_rest/producer.py"
			],
			[
				"templaterender",
				"eden/src/services/user_notification/transactional_email/template_renderer.ts"
			],
			[
				"dustyspeceden-email-development",
				"dusty-specs/apps/eden-email-development.yml"
			],
			[
				"packag",
				"eden/package.json"
			],
			[
				"common.ts",
				"eden/src/business/common/common.ts"
			],
			[
				"rc/services/database/orm/model_associations/associations_reconcile.ts",
				"eden/src/services/database/orm/model_associations/associations_reconcile.ts"
			],
			[
				"topicqueue",
				"eden/src/services/data_pipeline/kafka_rest/topic_queue.ts"
			],
			[
				"updated",
				"eden/src/services/user_notification/transactional_email/templates/updated_schedule_event/updated_schedule_event.html"
			],
			[
				"updated_schedule_event",
				"eden/src/services/user_notification/transactional_email/templates/updated_schedule_event/updated_schedule_event.html"
			],
			[
				"0_0_",
				"eden/src/routers/eden_router/middleware/validation/input_schemas/custom_validator_schemas/rrule_options_0_0_0.json"
			],
			[
				"client.py",
				"kafka-rest/kafka_rest/client.py"
			],
			[
				"producer.py",
				"kafka-rest/kafka_rest/producer.py"
			],
			[
				"exceptions.ts",
				"eden/src/global/exceptions/index.ts"
			],
			[
				"businesscom",
				"eden/src/business/common.ts"
			],
			[
				"eden.",
				"dusty-specs/apps/eden.yml"
			],
			[
				"personindex",
				"eden/src/routers/eden_router/resources/persons/index.ts"
			],
			[
				"personindexe",
				"eden/node_modules/pug/test/regression-2436/index.test.js"
			],
			[
				"resourcespersonindex.",
				"eden/src/routers/eden_router/resources/persons/index.ts"
			],
			[
				"edenresourcesperson",
				"eden/src/routers/eden_router/resources/persons/index.ts"
			],
			[
				"p",
				"eden/package.json"
			],
			[
				"card_profile_details",
				"eden/src/routers/staff_router/template_renderer/templates/person_detail_page/card_profile_details.html"
			],
			[
				"schemaloa",
				"eden/src/routers/eden_router/middleware/validation/schema_loader.ts"
			],
			[
				"postuserdocu",
				"eden/src/routers/eden_router/middleware/validation/input_schemas/endpoints/users/_documents/post_user_document_0_0_0.json"
			],
			[
				"passwordreset",
				"eden/src/routers/staff_router/resources/password_reset_router.ts"
			],
			[
				"ers/eden_router/middleware/authorization/messaging_channel_authorization.ts",
				"eden/src/routers/eden_router/middleware/authorization/messaging_channel_authorization.ts"
			],
			[
				"l_action_router/index.ts",
				"eden/src/routers/email_action_router/index.ts"
			],
			[
				"src/routers/email_action_router/middleware/authentication.ts",
				"eden/src/routers/email_action_router/middleware/authentication.ts"
			],
			[
				"/business/authentication.ts",
				"eden/src/business/authentication.ts"
			],
			[
				"eden/test/integration/services/sync/sync_update_transformer_test.ts",
				"eden/test/integration/services/sync/sync_update_transformer_test.ts"
			],
			[
				"base.html",
				"eden/src/services/user_notification/transactional_email/templates/shared/base.html"
			],
			[
				"messaginimple",
				"eden/src/services/messaging/implementation.ts"
			],
			[
				"authorization",
				"eden/src/routers/eden_router/middleware/authorization/index.ts"
			],
			[
				"eden-pro",
				"launch-config/eden-production.sh"
			],
			[
				"businessuser",
				"eden/src/business/users.ts"
			],
			[
				"servicesmessagingimplemen",
				"eden/src/services/messaging/implementation.ts"
			],
			[
				"makefi",
				"eden/Makefile"
			],
			[
				"migrationnotifi",
				"eden/src/services/database/sequelize/migrations/20180104185121-add-user-notification-setting-table.ts"
			],
			[
				"sync",
				"eden/src/services/sync/sync_update_transformer.ts"
			],
			[
				"paretn",
				"eden/src/services/common/parent_entities.ts"
			],
			[
				"permissionschan",
				"eden/src/services/common/permissions_changed.ts"
			],
			[
				"database/aggregator/users.ts",
				"eden/src/services/database/aggregator/users.ts"
			],
			[
				"usernotific",
				"eden/test/unit/services/user_notification/user_notification_service_test.ts"
			],
			[
				"usernotiinde",
				"eden/src/services/user_notification/index.ts"
			],
			[
				"usernotifindex",
				"eden/src/services/user_notification/index.ts"
			],
			[
				"transformerindex.ts",
				"eden/src/routers/eden_router/middleware/transformation/transformers/output/index.ts"
			],
			[
				"supported",
				"eden/src/routers/eden_router/middleware/supported_versions.ts"
			],
			[
				"usernoti",
				"eden/test/unit/services/user_notification/user_notification_service_test.ts"
			],
			[
				"usernotificinde",
				"eden/src/services/user_notification/index.ts"
			],
			[
				"aggregatorusers",
				"eden/src/services/database/aggregator/users.ts"
			],
			[
				"resourcesme.ts",
				"eden/src/routers/eden_router/resources/me/index.ts"
			],
			[
				"generator.ts",
				"eden/test/util/data_generator/index.ts"
			],
			[
				"aggregatoruser",
				"eden/src/services/database/aggregator/users.ts"
			],
			[
				"serviceusernotifindex",
				"eden/src/services/user_notification/index.ts"
			],
			[
				"dustyeden",
				"dusty-specs/apps/eden.yml"
			],
			[
				"unitdatabaseaggschedule",
				"eden/test/unit/services/database/aggregator/schedule/schedule_test.ts"
			],
			[
				"configindex",
				"eden/src/global/config/index.ts"
			],
			[
				"dataac",
				"eden/src/services/database/data_accessor/data_accessor.ts"
			],
			[
				"globalconfig",
				"eden/src/global/config/index.ts"
			],
			[
				"modelsteam.ts",
				"eden/src/services/database/orm/models/teams.ts"
			],
			[
				"backfillll",
				"eden/src/scripts/backfill/backfill_media_secrets_local.ts"
			],
			[
				"backfillserprod",
				"eden/out/src/scripts/backfill/backfill_media_secrets_staging_prod.js"
			],
			[
				"servicemessagingimpleme",
				"eden/src/services/messaging/implementation.ts"
			],
			[
				"eden-sta",
				"launch-config/eden-staging.sh"
			],
			[
				"denstaging",
				"launch-config/eden-staging.sh"
			],
			[
				"globallogging",
				"eden/src/global/logging/index.ts"
			],
			[
				"edenstai",
				"launch-config/eden-staging.sh"
			],
			[
				"servicemessagingimple",
				"eden/src/services/messaging/implementation.ts"
			],
			[
				"backfillprod",
				"eden/src/scripts/backfill/backfill_media_secrets_staging_prod.ts"
			],
			[
				"middlewaremessaging",
				"eden/src/routers/eden_router/middleware/authorization/messaging_channel_authorization.ts"
			],
			[
				"schemaplayer",
				"eden/src/services/database/sequelize/table_schemas/player_schema.ts"
			],
			[
				"edenprodu",
				"launch-config/eden-production.sh"
			],
			[
				"edensta",
				"launch-config/eden-staging.sh"
			],
			[
				"eden-p",
				"launch-config/eden-production.sh"
			],
			[
				"eden-staging",
				"launch-config/eden-staging.sh"
			],
			[
				"usernotificationindex",
				"eden/src/services/user_notification/index.ts"
			],
			[
				"routertwilio.ts",
				"eden/src/routers/twilio_webhooks_router/index.ts"
			],
			[
				"twilio_webhook_test",
				"eden/test/integration/routers/twilio_webhooks_router/twilio_webhook_test.ts"
			],
			[
				"externalmess",
				"eden/test/external_services_integration/messaging_service_test.ts"
			],
			[
				"externalmessagin",
				"eden/test/external_services_integration/messaging_service_test.ts"
			],
			[
				"webhookrouter",
				"eden/src/routers/twilio_webhooks_router/index.ts"
			],
			[
				"messagingimplement",
				"eden/src/services/messaging/implementation.ts"
			],
			[
				"businessmess",
				"eden/src/business/messaging.ts"
			],
			[
				"parenten",
				"eden/src/services/common/parent_entities.ts"
			],
			[
				"syncupdatetran",
				"eden/src/services/sync/sync_update_transformer.ts"
			],
			[
				"businessmessaging",
				"eden/src/business/messaging.ts"
			],
			[
				"aggremessagingchannelimage.ts",
				"eden/src/services/database/aggregator/messaging_channel_image.ts"
			],
			[
				"integration/routers/eden_router/persons_test",
				"eden/test/integration/routers/eden_router/persons_test.ts"
			],
			[
				"contenttype",
				"eden/src/routers/eden_router/content_type.ts"
			],
			[
				"middlewareauh",
				"eden/src/routers/eden_router/middleware/authentication.ts"
			],
			[
				"authentica",
				"eden/src/business/authentication.ts"
			],
			[
				"datadefinapiperson",
				"eden/src/global/data_definition/api/person.ts"
			],
			[
				"resourceperson",
				"eden/src/routers/eden_router/resources/persons/index.ts"
			],
			[
				"versioning.ts",
				"eden/src/routers/eden_router/middleware/versioning/index.ts"
			],
			[
				"supporte",
				"eden/src/routers/eden_router/middleware/supported_versions.ts"
			],
			[
				"fileupload",
				"eden/src/routers/eden_router/file_upload.ts"
			],
			[
				"resourcepersoninex",
				"eden/src/routers/eden_router/resources/persons/index.ts"
			],
			[
				"persontest.ts",
				"eden/test/integration/routers/eden_router/persons_test.ts"
			],
			[
				"routespersoninde",
				"eden/src/routers/eden_router/resources/persons/index.ts"
			],
			[
				"persons.ts",
				"eden/src/business/persons.ts"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/scratch/eden.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 67.0,
		"last_filter": "onChannelCreated",
		"selected_items":
		[
			[
				"onChannelCreated",
				"onChannelCreated"
			],
			[
				"queuepermission",
				"queueRecalculateAndSavePermissions"
			],
			[
				"QueueablePermissionsService",
				"QueueablePermissionsService"
			],
			[
				"addPersonToTeam",
				"addPersonToTeam"
			],
			[
				"getappfor",
				"getAppForTesting"
			],
			[
				"updatepersoncon",
				"updatePersonContactInfo"
			],
			[
				"databaseagg",
				"DatabaseAggregatorBusinessInterface"
			],
			[
				"otherser",
				"OtherServiceDataAccessor"
			],
			[
				"getmockmes",
				"getMockMessagingChannelAggregator"
			],
			[
				"uploadfilesto",
				"uploadFilesToMediaService"
			],
			[
				"routePostChannelImage",
				"routePostChannelImage"
			],
			[
				"momen",
				"Moment"
			],
			[
				"getQueueUr",
				"getQueueUrl"
			],
			[
				"PlaceIdLatLongCache",
				"PlaceIdLatLongCache"
			],
			[
				"updateEventSeries",
				"updateEventSeries"
			],
			[
				"mockmessaging",
				"MockMessagingServiceInterface"
			],
			[
				"getEventSeriesEvents",
				"getEventSeriesEvents"
			],
			[
				"sendNewScheduleEventEmail",
				"sendNewScheduleEventEmail"
			],
			[
				"addGroupForPersonAndTeam",
				"addGroupForPersonAndTeam"
			],
			[
				"userinst",
				"UserInstance"
			],
			[
				"userins",
				"UserInstance"
			],
			[
				"record_state_on_write",
				"record_state_on_write"
			],
			[
				"recordsate",
				"record_state_on_write"
			],
			[
				"Associations",
				"AssociationScope"
			],
			[
				"googlepro",
				"GoogleSubscriptionProvider"
			],
			[
				"scheduleae",
				"ScheduleEventAttributes"
			],
			[
				"runmi",
				"runMigration"
			],
			[
				"pushgame",
				"push_game_account"
			],
			[
				"backfill_item",
				"backfill_item"
			],
			[
				"UserInviteToTeamEmitter",
				"UserInviteToTeamEmitter"
			],
			[
				"dedupeta",
				"dedupe_table"
			],
			[
				"rolebu",
				"RoleBusinessSchema"
			],
			[
				"HasManyGetAssociationsMixin",
				"HasManyGetAssociationsMixin"
			],
			[
				"Sequelize",
				"Sequelize"
			],
			[
				"belongs",
				"belongsToMany"
			],
			[
				"addasso",
				"addAssociation"
			],
			[
				"get_multi_game_stats",
				"get_multi_game_stats"
			],
			[
				"findbye",
				"findByEmail"
			],
			[
				"associanto",
				"AssociationOptionsBelongsToMany"
			],
			[
				"import",
				"import"
			],
			[
				"HasManyCreateAssociationMixin",
				"HasManyCreateAssociationMixin"
			],
			[
				"_update_context_for_user_search",
				"_update_context_for_user_search"
			],
			[
				"sendmandri",
				"send_mandrill_message"
			],
			[
				"_regenerate_game_and_team_stats",
				"_regenerate_game_and_team_stats"
			],
			[
				"_derive_game_stats",
				"_derive_game_stats"
			],
			[
				"get_game_account_payload_for_stream",
				"get_game_account_payload_for_stream"
			],
			[
				"pivotStatsForOutput",
				"pivotStatsForOutput"
			],
			[
				"batsgamestat",
				"BatsGameStatsDoc"
			],
			[
				"batsstatdoc",
				"BatsGameStatsDoc"
			],
			[
				"getDerived",
				"getDerivedMultiGamePivotedStatsWithBaseStats"
			],
			[
				"getallmember",
				"get_all_members"
			],
			[
				"flatten",
				"flatten"
			],
			[
				"related",
				"related_to"
			],
			[
				"BatsTeamStatViewController",
				"class BatsTeamStatViewController: UIViewController"
			],
			[
				"gcca",
				"GCCache"
			],
			[
				"GCTeamStatsEntry",
				"class GCTeamStatsEntry: GCEntryBase"
			],
			[
				"GCTeamStatsViewController",
				"class GCTeamStatsViewController: GCTeamChildViewController"
			],
			[
				"SeasonStatsRouter",
				"class SeasonStatsRouter: NSObject"
			],
			[
				"GameStreamEvent",
				"extension GCEventEntry: GameStreamEvent"
			],
			[
				"_add_venue_tag",
				"_add_venue_tag"
			],
			[
				"export_game_xml",
				"export_game_xml"
			],
			[
				"makeController",
				"makeController"
			],
			[
				"deleteentit",
				"delete_entity_role"
			],
			[
				"unlink",
				"unlink"
			],
			[
				"gamerouter",
				"game_router"
			],
			[
				"delete_team",
				"delete_team"
			],
			[
				"databasete",
				"DatabaseTestCase"
			],
			[
				"deleteteam",
				"delete_team_if_no_admins"
			],
			[
				"remove_pla",
				"remove_player"
			],
			[
				"tran",
				"transactional"
			],
			[
				"remove_player",
				"remove_player"
			],
			[
				"dataob",
				"DataObjectManager"
			],
			[
				"get_stream",
				"get_stream"
			],
			[
				"resync",
				"resync_maxpreps"
			],
			[
				"getschoolsforser",
				"get_schools_for_search_string"
			],
			[
				"isarc",
				"is_archived"
			],
			[
				"is_arch",
				"is_archived"
			],
			[
				"merge_pla",
				"merge_player"
			],
			[
				"linked",
				"linked_to"
			],
			[
				"get_game_acc",
				"get_game_account_payload_for_stream"
			],
			[
				"add_team_to_group_schedule",
				"add_team_to_group_schedule"
			],
			[
				"regenerate_game_stats",
				"regenerate_game_stats"
			],
			[
				"update_group_schedules_team_info",
				"update_group_schedules_team_info"
			],
			[
				"followip",
				"follow_up_imported_players"
			],
			[
				"follow_up_imported_players",
				"follow_up_imported_players"
			],
			[
				"_update_leader_stats",
				"_update_leader_stats"
			],
			[
				"fullyproce",
				"fullyProcessNextEvent"
			],
			[
				"get_docker_client",
				"get_docker_client"
			],
			[
				"BaseballTeamStatEditEvent",
				"BaseballTeamStatEditEvent"
			],
			[
				"SabertoothEventCompactor",
				"SabertoothEventCompactor"
			],
			[
				"updategamestat",
				"_update_game_stats"
			],
			[
				"item_is_expired",
				"item_is_expired"
			],
			[
				"create_game_account_state",
				"create_game_account_state"
			],
			[
				"PressListView",
				"PressListView"
			],
			[
				"_sanitize_event",
				"_sanitize_event"
			],
			[
				"PushNotificationProviderService",
				"class PushNotificationProviderService: NSObject"
			],
			[
				"makedbre",
				"make_dbref"
			],
			[
				"appfriends",
				"struct AppFriendsKeySet"
			],
			[
				"appfrien",
				"AppFriendsKeyPair"
			],
			[
				"AppFriendsMessageNotificationHandler",
				"class AppFriendsMessageNotificationHandler: NotificationHandler"
			],
			[
				"get_ref_",
				"get_ref_id"
			],
			[
				"start_new_season",
				"start_new_season"
			],
			[
				"create_reca",
				"create_recap"
			],
			[
				"jwt",
				"JWT"
			],
			[
				"setleag",
				"setLeagues"
			],
			[
				"setleague",
				"setLeague"
			],
			[
				"GCDataUpload",
				"GCDataUpload"
			],
			[
				"packagedata",
				"packageData"
			]
		],
		"width": 1196.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 368.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
